import React from "react";
import Head from "next/head";
import Grid from "@material-ui/core/Grid";
import { makeStyles } from "@material-ui/core/styles";
import { Formik } from "formik";
import * as Yup from "yup";
import Input from "../../components/default/form/input";
import Button from "../../components/default/form/button";
import Typography from "@material-ui/core/Typography";
import Box from "@material-ui/core/Box";
import Card from "@material-ui/core/Card";
import InputAdornment from "@material-ui/core/InputAdornment";
import Visibility from "@material-ui/icons/Visibility";
import { Person, Email } from "@material-ui/icons";
import VisibilityOff from "@material-ui/icons/VisibilityOff";
import IconButton from "@material-ui/core/IconButton";
import ProgressLoader from "../../components/default/progress/loading";
import ErrorAlert from "../../components/default/form/errorAlert";
import SuccessAlert from "../../components/default/form/successAlert";
// regex
import { useRouter } from "next/router";

const usernameRegex = /^[A-Za-z]+$/;
const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i;
const passwordRegex = /((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$/;

const useStyles = makeStyles((theme) => ({
  root: {
    flexGrow: 1,
  },
  paper: {
    padding: theme.spacing(2),
    textAlign: "center",
    color: theme.palette.text.secondary,
  },
  card: {
    padding: "36px",
    marginTop: "19px",
  },
}));

const SignUp = () => {
  const classes = useStyles();
  const router = useRouter();
  const [values, setValues] = React.useState({
    showComfirmPassword: false,
    showPassword: false,
  });
  const [isLoading, setIsLoading] = React.useState(false);
  const [error, setError] = React.useState("");
  const [message, setMessage] = React.useState("");

  const handleClickShowPassword = () => {
    setValues({
      ...values,
      showPassword: !values.showPassword,
    });
  };
  const handleClickComfirmPassword = () => {
    setValues({
      ...values,

      showComfirmPassword: !values.showComfirmPassword,
    });
  };

  return (
    <div className={classes.root}>
      <Head>
        <title>Sign Up</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Grid container spacing={3}>
        <Grid item xs={12} md={3} sm={12}></Grid>
        <Grid item xs={12} md={6} sm={12}>
          <Card className={classes.card}>
            <Box py={3}>
              <Typography variant="h4" color="primary" align="left">
                Contact Me
              </Typography>
            </Box>
            <Box py={3}>
              {error ? (
                <ErrorAlert title={error} />
              ) : message ? (
                <SuccessAlert title={message} />
              ) : (
                ""
              )}
            </Box>

            <Formik
              initialValues={{
                title: "",
                subject: "",
                email: "",
              }}
              validationSchema={Yup.object({
                body: Yup.string()
                  .min(3, "body must be atleast 3 characters")
                  .max(20, "body is too Long!")
                  .matches(
                    usernameRegex,
                    "Only alphabets are allowed for this field "
                  )
                  .required("body is required"),
                subject: Yup.string()
                  .min(3, "subject must be atleast 3 characters")
                  .max(20, "subject is too Long!")
                  .matches(
                    usernameRegex,
                    "Only alphabets are allowed for this field "
                  )
                  .required("body is required"),
                email: Yup.string()
                  .email("Email is invalid")
                  .matches(emailRegex, "Email is invalid ")
                  .required("Email is required"),
              })}
              onSubmit={async (values) => {
                try {
                  setIsLoading(true);
                  setError("");
                  setIsLoading(false);
                  setMessage("Account created successfully");
                  router.push("/contact");
                } catch (err) {
                  setMessage("");
                  setError(err.message);
                  setIsLoading(false);
                }
              }}
            >
              {(props) => (
                <form onSubmit={props.handleSubmit}>
                  {/* email */}
                  <Input
                    type="email"
                    onChange={props.handleChange}
                    onBlur={props.handleBlur}
                    value={props.values.email}
                    label="Email"
                    name="email"
                    error={props.errors.email ? true : false}
                    errortext={props.errors.email}
                    InputProps={{
                      endAdornment: (
                        <InputAdornment position="start">
                          <IconButton edge="end">
                            {
                              <Email
                                color={props.errors.email ? "error" : "primary"}
                              />
                            }
                          </IconButton>
                        </InputAdornment>
                      ),
                    }}
                  />
                  {/* subjet */}
                  <Input
                    type="text"
                    onChange={props.handleChange}
                    onBlur={props.handleBlur}
                    value={props.values.subject}
                    label="subject"
                    name="subject"
                    error={props.errors.subject ? true : false}
                    errortext={props.errors.subject}
                    InputProps={{
                      endAdornment: (
                        <InputAdornment position="start">
                          <IconButton edge="end">
                            {
                              <Person
                                color={
                                  props.errors.subject ? "error" : "primary"
                                }
                              />
                            }
                          </IconButton>
                        </InputAdornment>
                      ),
                    }}
                  />
                  {/* 
                   {/*  */}
                  <Input
                    type="text"
                    onChange={props.handleChange}
                    onBlur={props.handleBlur}
                    value={props.values.body}
                    label="Message"
                    name="body"
                    error={props.errors.body ? true : false}
                    errortext={props.errors.body}
                    InputProps={{
                      endAdornment: (
                        <InputAdornment position="start">
                          <IconButton edge="end">
                            {
                              <Person
                                color={props.errors.body ? "error" : "primary"}
                              />
                            }
                          </IconButton>
                        </InputAdornment>
                      ),
                    }}
                  />

                  <Button
                    label={isLoading ? <ProgressLoader /> : "Send"}
                    type="submit"
                  />
                </form>
              )}
            </Formik>
          </Card>
        </Grid>
        <Grid item xs={12} md={3} sm={12}></Grid>
      </Grid>
    </div>
  );
};

SignUp.layout = "defaultLayout";
export default SignUp;
